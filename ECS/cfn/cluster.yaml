---
AWSTemplateFormatVersion: 2010-09-09
Parameters:
  Version:
    Description: "v0.0.2"
    Type: String
  Environment:
    Description: The name of cluster ENV
    Type: String
  KeyName:
    Description: Application ssh login keypair name
    Type: AWS::EC2::KeyPair::KeyName
    Default: ECS-Key
Mappings:
  AWSRegionToAMI:
    ap-southeast-1:
      AMIID: ami-08d4fe232c67b81b8
    ap-southeast-2:
      AMIID: ami-08c26730c8ee004fa

Resources:

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${AWS::StackName}-Cluster

  ECSClusterLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub ecs-cluster-${Environment}
      RetentionInDays: 30

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets: !Split [ ',', !ImportValue my-ecs-public-subnets ]
      SecurityGroups:
      - !Ref ALBSecurityGroup
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-ALB

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref DefaultTargetGroup

  # We define a default target group here, as this is a mandatory Parameters
  # when creating an Application Load Balancer Listener. This is not used, instead
  # a target group is created per-service in each service template (../services/*)
  DefaultTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${Environment}-default
      VpcId: !ImportValue my-ecs-vpc
      Port: 80
      Protocol: HTTP

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to client cluster
      VpcId: !ImportValue my-ecs-vpc
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: "-1"
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-ALB-SG

  ECSClusterAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Split [ ',', !ImportValue my-ecs-private-subnets ]
      LaunchConfigurationName: !Ref ECSClusterLaunchConfiguration
      MinSize: 2
      MaxSize: 4
      DesiredCapacity: 2
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-ECS-ClUSTER-ASG
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 1
        PauseTime: PT15M
        SuspendProcesses:
          - HealthCheck
          - ReplaceUnhealthy
          - AZRebalance
          - AlarmNotification
          - ScheduledActions
        WaitOnResourceSignals: true

  ECSClusterScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref ECSClusterAutoScalingGroup
      Cooldown: 300
      ScalingAdjustment: 1

  ECSClusterScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref ECSClusterAutoScalingGroup
      Cooldown: 300
      ScalingAdjustment: -1

  MemoryReservationHighAlert:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${AWS::StackName}-MemoryReservationHighAlert
      EvaluationPeriods: '1'
      Statistic: Maximum
      Threshold: '80'
      Period: '60'
      AlarmActions:
        - !Ref ECSClusterScaleUpPolicy
      OKActions:
        - !Ref ECSClusterScaleDownPolicy
      Dimensions:
        - Name: ClusterName
          Value: !Ref ECSCluster
      ComparisonOperator: GreaterThanThreshold
      MetricName: MemoryReservation
      Namespace: AWS/ECS

  CpuReservationHighAlert:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${AWS::StackName}-CpuReservationHighAlert
      EvaluationPeriods: '1'
      Statistic: Maximum
      Threshold: '80'
      Period: '60'
      AlarmActions:
        - !Ref ECSClusterScaleUpPolicy
      OKActions:
        - !Ref ECSClusterScaleDownPolicy
      Dimensions:
        - Name: ClusterName
          Value: !Ref ECSCluster
      ComparisonOperator: GreaterThanThreshold
      MetricName: CPUReservation
      Namespace: AWS/ECS

  ECSClusterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn:
      - ALBSecurityGroup
    Properties:
      GroupDescription: ECS Cluster Security Group
      VpcId: !ImportValue my-ecs-vpc
      SecurityGroupEgress:
      - IpProtocol: "-1"
        CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 32768
        ToPort: 61000
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        SourceSecurityGroupId:
          Fn::ImportValue:
            !Sub my-ecs-bastion-${Environment}
      - SourceSecurityGroupId: !Ref ALBSecurityGroup
        IpProtocol: -1
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-ECS-CLUSTER-SG

  ECSClusterLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref ECSClusterProfile
      ImageId: !FindInMap [AWSRegionToAMI, !Ref 'AWS::Region', AMIID]
      InstanceType: t2.large
      SecurityGroups:
      - !Ref ECSClusterSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum install -y aws-cfn-bootstrap aws-cli awslogs jq

          # set up the ECS config
          cat >> /etc/ecs/ecs.config <<EoConf
          ECS_CLUSTER=${ECSCluster}
          EoConf

          stop ecs
          start ecs

          /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSClusterLaunchConfiguration
          /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSClusterAutoScalingGroup

    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              awslogs: []
        files:
          "/etc/cfn/cfn-hup.conf":
            mode: 000400
            owner: root
            group: root
            content: !Sub |
              [main]
              stack=${AWS::StackId}
              region=${AWS::Region}
          "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
            mode: 000400
            owner: root
            group: root
            content: !Sub |
              [cfn-auto-reloader-hook]
              triggers=post.update
              path=Resources.ECSLaunchConfiguration.Metadata.AWS::CloudFormation::Init
              action=/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSClusterLaunchConfiguration
              runas=root
          "/etc/awslogs/awscli.conf":
            content: !Sub |
              [plugins]
              cwlogs = cwlogs
              [default]
              region = ${AWS::Region}
          "/etc/awslogs/awslogs.conf":
            content: !Sub |
              [general]
              state_file = /var/lib/awslogs/agent-state
              [/var/log/amazon/ssm/amazon-ssm-agent.log]
              datetime_format = %Y-%m-%d %H:%M:%S
              file = /var/log/amazon/ssm/amazon-ssm-agent.log
              log_stream_name = {instance_id}/var/log/amazon/ssm/amazon-ssm-agent.log
              log_group_name = ${ECSClusterLogGroup}
              [/var/log/amazon/ssm/errors.log]
              datetime_format = %Y-%m-%d %H:%M:%S
              file = /var/log/amazon/ssm/errors.log
              log_stream_name = {instance_id}/var/log/amazon/ssm/errors.log
              log_group_name = ${ECSClusterLogGroup}
              [/var/log/audit/audit.log]
              file = /var/log/audit/audit.log
              log_stream_name = {instance_id}/var/log/audit/audit.log
              log_group_name = ${ECSClusterLogGroup}
              [/var/log/awslogs.log]
              datetime_format = %Y-%m-%d %H:%M:%S
              file = /var/log/awslogs.log
              log_stream_name = {instance_id}/var/log/awslogs.log
              log_group_name = ${ECSClusterLogGroup}
              [/var/log/boot.log]
              file = /var/log/boot.log
              log_stream_name = {instance_id}/var/log/boot.log
              log_group_name = ${ECSClusterLogGroup}
              [/var/log/cfn-init.log]
              datetime_format = %Y-%m-%d %H:%M:%S
              file = /var/log/cfn-init.log
              log_stream_name = {instance_id}/var/log/cfn-init.log
              log_group_name = ${ECSClusterLogGroup}
              [/var/log/cfn-wire.log]
              datetime_format = %Y-%m-%d %H:%M:%S
              file = /var/log/cfn-wire.log
              log_stream_name = {instance_id}/var/log/cfn-wire.log
              log_group_name = ${ECSClusterLogGroup}
              [/var/log/cloud-init-output.log]
              file = /var/log/cloud-init-output.log
              log_stream_name = {instance_id}/var/log/cloud-init-output.log
              log_group_name = ${ECSClusterLogGroup}
              [/var/log/cloud-init.log]
              datetime_format = %b %d %H:%M:%S
              file = /var/log/cloud-init.log
              log_stream_name = {instance_id}/var/log/cloud-init.log
              log_group_name = ${ECSClusterLogGroup}
              [/var/log/cron]
              datetime_format = %b %d %H:%M:%S
              file = /var/log/cron
              log_stream_name = {instance_id}/var/log/cron
              log_group_name = ${ECSClusterLogGroup}
              [/var/log/maillog]
              datetime_format = %b %d %H:%M:%S
              file = /var/log/maillog
              log_stream_name = {instance_id}/var/log/maillog
              log_group_name = ${ECSClusterLogGroup}
              [/var/log/messages]
              datetime_format = %b %d %H:%M:%S
              file = /var/log/messages
              log_stream_name = {instance_id}/var/log/messages
              log_group_name = ${ECSClusterLogGroup}
              [/var/log/secure]
              datetime_format = %b %d %H:%M:%S
              file = /var/log/secure
              log_stream_name = {instance_id}/var/log/secure
              log_group_name = ${ECSClusterLogGroup}
              [/var/log/yum.log]
              datetime_format = %b %d %H:%M:%S
              file = /var/log/yum.log
              log_stream_name = {instance_id}/var/log/yum.log
              log_group_name = ${ECSClusterLogGroup}
            mode: '000644'
            owner: root
            group: root
        services:
          sysvinit:
            cfn-hup:
              enabled: true
              ensureRunning: true
              files:
                - /etc/cfn/cfn-hup.conf
                - /etc/cfn/hooks.d/cfn-auto-reloader.conf
            awslogs:
              enabled: true
              ensureRunning: true
              files:
                - /etc/awslogs/awslogs.conf
                - /etc/awslogs/awscli.conf

  ECSClusterProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - !Ref ECSClusterRole

  ECSClusterRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-ECSRole
      Path: /app/
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
        - PolicyName: allow-log-stream
          PolicyDocument:
            Version: 2012-10-17
            Statement:
            - Effect: Allow
              Action:
              - logs:*
              Resource: "*"
        - PolicyName: allow-read-only-access-to-ecr
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
              - ecr:GetAuthorizationToken
              - ecr:BatchCheckLayerAvailability
              - ecr:GetDownloadUrlForLayer
              - ecr:GetRepositoryPolicy
              - ecr:DescribeRepositories
              - ecr:ListImages
              - ecr:BatchGetImage
              Resource: "*"
        - PolicyName: allow-ecs-permissions
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
              - ecs:*
              Resource: "*"
        - PolicyName: allow-s3
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
              - s3:*
              Resource: "*"
        - PolicyName: allow-kms
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
              - kms:*
              Resource: "*"
        - PolicyName: allow-dynamodb
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
              - dynamodb:*
              Resource: "*"
        - PolicyName: allow-rds
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
              - rds:*
              Resource: "*"
        - PolicyName: allow-cloudwatch
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
              - cloudwatch:*
              Resource: "*"
        - PolicyName: allow-EC2Messages
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
              - ec2messages:*
              Resource: "*"
        - PolicyName: allow-SSM
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
              - ssm:*
              Resource: "*"

Outputs:
  ECSCluster:
    Description: A reference to the cluster
    Value: !Ref ECSCluster
    Export:
      Name: my-ecs-cluster
  LoadBalancer:
    Description: A reference to the Application Load Balancer
    Value: !Ref LoadBalancer
    Export:
      Name: my-ecs-cluster-loadBalancer
  LoadBalancerUrl:
    Description: The URL of the ALB
    Value: !GetAtt LoadBalancer.DNSName
  LoadBalancerListener:
    Description: A reference to a port 80 listener
    Value: !Ref LoadBalancerListener
    Export:
      Name: my-ecs-cluster-listener
