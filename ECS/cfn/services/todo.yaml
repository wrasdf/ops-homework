AWSTemplateFormatVersion:  "2010-09-09"

Parameters:
  Environment:
    Description: The Service Env
    Type: String
  ServiceName:
    Description: The Service Container Name
    Type: String
  ContainerImage:
    Type: String
  ContainerPort:
    Description: The Service Container Port
    Type: String
  Path:
    Description: The path to register with the Application Load Balancer
    Type: String

Resources:

  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub cluster-${Environment}-${ServiceName}
      RetentionInDays: 14

  ECSService:
    Type: AWS::ECS::Service
    DependsOn: ServiceListenerRule
    Properties:
      Cluster: !ImportValue my-ecs-cluster
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      Role: !Ref ServiceRole
      ServiceName: !Ref ServiceName
      DesiredCount: 2
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers:
      - ContainerName: !Ref ServiceName
        ContainerPort: !Ref ContainerPort
        TargetGroupArn: !Ref TargetGroup

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref ServiceName
      RequiresCompatibilities:
        - EC2
      ContainerDefinitions:
        - Name: !Ref ServiceName
          Essential: true
          Image: !Ref ContainerImage
          Memory: '256'
          Cpu: '1'
          Environment:
            - Name: ServiceName
              Value: !Ref ServiceName
          PortMappings:
            - ContainerPort: !Ref ContainerPort
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchLogsGroup
              awslogs-region: !Ref AWS::Region

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !ImportValue my-ecs-vpc
      Port: !Ref ContainerPort
      Protocol: HTTP
      Matcher:
        HttpCode: 200-299
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /todo/health
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2

  ServiceListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !ImportValue my-ecs-cluster-listener
      Priority: 1
      Conditions:
      - Field: path-pattern
        Values:
        - !Ref Path
      Actions:
      - TargetGroupArn: !Ref TargetGroup
        Type: forward

  # This IAM Role grants the service access to register/unregister with the
  # Application Load Balancer (ALB). It is based on the default documented here:
  # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/service_IAM_role.html
  ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-${Environment}-${ServiceName}
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ecs.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${ServiceName}-access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
            - Effect: Allow
              Action:
              - ec2:AuthorizeSecurityGroupIngress
              - ec2:Describe*
              - elasticloadbalancing:DeregisterInstancesFromLoadBalancer
              - elasticloadbalancing:Describe*
              - elasticloadbalancing:RegisterInstancesWithLoadBalancer
              - elasticloadbalancing:DeregisterTargets
              - elasticloadbalancing:DescribeTargetGroups
              - elasticloadbalancing:DescribeTargetHealth
              - elasticloadbalancing:RegisterTargets
              Resource: "*"

  AutoscalingRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-${Environment}-${ServiceName}-Autoscaling-Role
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - application-autoscaling.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${ServiceName}-autoscaling
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - application-autoscaling:*
                  - cloudwatch:DescribeAlarms
                  - cloudwatch:PutMetricAlarm
                  - ecs:DescribeServices
                  - ecs:UpdateService
                Resource: '*'

  ServiceScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: ECSService
    Properties:
      MaxCapacity: 10
      MinCapacity: 2
      ResourceId: !Join
        - /
        - - service
          - !ImportValue my-ecs-cluster
          - !GetAtt ECSService.Name
      RoleARN: !GetAtt AutoscalingRole.Arn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  ServiceScaleUpPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub ${ServiceName}-StepUpPolicy
      PolicyType: StepScaling
      ScalingTargetId: !Ref ServiceScalingTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 1800
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalLowerBound: 0
            ScalingAdjustment: 1

  ServiceScaleDownPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub ${ServiceName}-StepDownPolicy
      PolicyType: StepScaling
      ScalingTargetId: !Ref ServiceScalingTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 1800
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalUpperBound: 0
            ScalingAdjustment: -1

  CPUScaleUpAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: CPU utilization greater than 90%
      AlarmDescription: Alarm if cpu utilization greater than 90% of reserved cpu
      Namespace: AWS/ECS
      MetricName: CPUUtilization
      Dimensions:
        - Name: ClusterName
          Value: !ImportValue my-ecs-cluster
        - Name: ServiceName
          Value: !GetAtt ECSService.Name
      Statistic: Maximum
      Period: "60"
      EvaluationPeriods: "3"
      Threshold: "90"
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref ServiceScaleUpPolicy

  CPUScaleDownAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: CPU utilization less than 70%
      AlarmDescription: Alarm if cpu utilization greater than 70% of reserved cpu
      Namespace: AWS/ECS
      MetricName: CPUUtilization
      Dimensions:
        - Name: ClusterName
          Value: !ImportValue my-ecs-cluster
        - Name: ServiceName
          Value: !GetAtt ECSService.Name
      Statistic: Maximum
      Period: "60"
      EvaluationPeriods: "10"
      Threshold: "70"
      ComparisonOperator: LessThanThreshold
      AlarmActions:
        - !Ref ServiceScaleDownPolicy
